#!/usr/bin/env ruby
# -*- ruby -*-
# coma - a console mail user agent

require 'fileutils'
require 'strscan'
require 'tempfile'
require 'time'

require 'sqlite3'

require 'minimime'

$MAILDIR_PREFIX = "~/Mail"

COMA_VERSION = "0.3"

def folder2path(folder)
  if File.directory?(folder + "/cur")
    folder + "/cur"
  elsif File.directory?(folder)
    folder
  else
    case folder
    when /\A\+([\/.~].*)/
      File.expand_path($1) + "/cur"
    when /\A\+(.+)/
      File.expand_path($MAILDIR_PREFIX) + "/" + $1 + "/cur"
    when "+"  # current folder
      folder2path(with_context { |ctx| ctx['folder'] })
    end
  end
end

# XXX locking
def with_context
  unless File.directory?(File.expand_path("~/.config/coma"))
    FileUtils.mkdir_p(File.expand_path("~/.config/coma"))
  end

  ctx = File.open(contextfile) { |f| Marshal.load(f) } rescue {}
  r = yield ctx
  File.open(contextfile, "w") { |f| Marshal.dump(ctx, f) }
  r
end

def contextfile
  File.expand_path("~/.config/coma/context")
end

def load_seq(name)
  begin
    seq = File.open(File.expand_path("~/.config/coma/seq-#{name}")) { |f|
      Marshal.load(f)
    }
  rescue Errno::ENOENT
    warn "coma: no such sequence '#{name}'"
    seq = []
  end
  i = 1
  seq.map { |(id, depth)|
    begin
      msg = Msg::Cache[id]
      msg.idx = i
      msg.depth = depth
      
      i+=1
      msg
    rescue Errno::ENOENT
      nil
    end
  }.compact
end

def save_seq(name, seq)
  name = name.sub(/\A%/, "")
  File.open(File.expand_path("~/.config/coma/seq-#{name}"), "w") { |f|
    d = seq.map { |msg|
      [msg.id, msg.depth]
    }
    Marshal.dump(d, f)
  }
end

def default_seq
  ENV["COMASEQ"] || "default"
end

def term_width
  # XXX stty would be better; good enough with urxvt/xterm, bash/zsh
  ENV["COLUMNS"].to_i.nonzero? || 80
end

def parse_config
  cfg = {}

  begin
    IO.foreach(File.expand_path("~/.config/coma/config")).each { |line|
      next  unless line =~ /:/
      name, value = line.split(":", 2)
      cfg[name.strip] = value.strip
    }
  rescue Errno::ENOENT
  end

  cfg
end

def parse(argv, cmd, flags)
  if flags.first =~ /\.\.\.$/
    def_opt = $`
  else
    def_opt = "args"
  end
  opts = {def_opt => []}

  if a = parse_config[cmd]
    argv.unshift(*a.split)
  end

  until argv.empty?
    case arg = argv.shift
    when "-h", "-help", "--help"
      warn "Usage: #{cmd} [switches]\n  switches are: \n  -" +
        flags.join("\n  -")
      exit
    when /\A-(?=.)(?!\d)/
      flag = $'
      if flags.include?(flag)
        opts[flag] = true
      elsif flags.include?(flag + ":")
        opts[flag] = argv.shift
      elsif flags.include?(flag + "...")
        def_opt = flag
        opts[def_opt] ||= []
      else
        abort "invalid flag '#{arg}'"
      end
    else
      opts[def_opt] << arg
    end
  end
  
  opts
end

class SqliteCache
  def initialize
    @inner_cache = {}
    @db = SQLite3::Database.new(File.expand_path("~/.config/coma/cache.db"))

    @db.execute_batch(<<EOF)
CREATE TABLE IF NOT EXISTS mails (
  id TEXT PRIMARY KEY,
  file TEXT,
  folder TEXT,
  mid TEXT,
  subject TEXT,
  date DATETIME,
  frm TEXT,
  irt TEXT
);
CREATE INDEX IF NOT EXISTS mails_file ON mails (file);
CREATE INDEX IF NOT EXISTS mails_folder ON mails (folder);
EOF

    @db.execute("BEGIN TRANSACTION")
    at_exit { @db.execute("COMMIT") }
  end

  def save(msg)
    @db.execute("INSERT OR REPLACE INTO mails VALUES (?,?,?,?,?,?,?,?)",
                msg.id, msg.file, msg.folder, msg.mid,
                msg.subj, msg.date, msg.from, msg.irt)
  end

  def [](key)
    @inner_cache[key] ||=
      Msg.new(*@db.get_first_row("SELECT * FROM mails WHERE id = ?", key))
  end

  def from_file(key, folder=nil)
    rec = @db.get_first_row("SELECT * FROM mails WHERE file = ?", key)
    if rec
      Msg.new(*rec)
    else
      msg = Msg.parse(key, folder)
      save msg
      msg
    end
  end

  def from_folder(folder)
    @db.execute("SELECT * FROM mails WHERE folder = ?", folder).map { |row|
      Msg.new(*row)
    }
  end

  def delete(key)
    @db.execute("DELETE FROM mails WHERE id = ?", key)
    @inner_cache.delete key
  end
end

Msg = Struct.new(:id, :file, :folder, :mid, :subj, :date, :from, :irt, :idx, :depth)
class Msg
  def self.parse(file, folder=nil)
    email = MiniMime.new(File.read(file).gsub("\n", "\r\n"))

    date = Time.parse(email["date"]).to_f  rescue File.mtime(file).to_f

    Msg.new(file.gsub(/:2,*$/, ''),
            file,
            folder,
            email["message-id"],
            email["subject"] || "(no subject)",
            date,
            email["from"],
            email["in-reply-to"],
            nil, 0)
  end

  def flags
    file[/:2,([a-z]*)$/i, 1].to_s.upcase
  end

  def flags=(newflags)
    self.file = file.gsub(/:2,([a-z]*)$/i, ":2,#{newflags}")
  end

  Cache = SqliteCache.new
end

# based on mhthread, mostly works
# 24aug2010  +chris+
def thread(seq, reverse)
  mails = seq.map { |msg|
    re_in_subj = false
    sortsubj = msg.subj.strip.gsub(/^(re\[\d+\][:;]\s*)+/i) {
      re_in_subj = true
      ""
    }

    {:mid => msg.mid, :subj => sortsubj, :orig_subj => msg.subj,
      :re_in_subj => re_in_subj, :irt => msg.irt, :date => msg.date,
      :from => msg.from, :id => msg.id,
      :file => msg.file, :flags => msg.flags, :idx => msg.idx
    }
  }

  mid2msg = {}
  tree = {}
  toplevel = {}
  subjtop = {}
  subjsets = {}
  subjearliest = {}

  mails.each { |msg|
    mid = msg[:mid]
    irt = msg[:irt]

    mid2msg[mid] = msg

    tree[mid] ||= {}

    unless irt
      toplevel[mid] = msg
      subjtop[msg[:subj]] = msg  unless msg[:re_in_subj]
      (subjsets[msg[:subj]] ||= []) << msg

      if !subjearliest[msg[:subj]] || subjearliest[msg[:subj]] > msg[:date]
        subjearliest[msg[:subj]] = msg[:date]
      end
    else
      tree[irt] ||= {}
      tree[irt][mid] = msg
    end
  }

  tree.each { |mid, _|
    next  if mid2msg[mid]

    tree[mid].each { |kid, _|
      msg = mid2msg[kid]
      mid = msg[:mid]
      next  if toplevel[mid]

      toplevel[mid] = msg
      subjtop[msg[:subj]] = msg  unless msg[:re_in_subj]
      (subjsets[msg[:subj]] ||= []) << msg

      if !subjearliest[msg[:subj]] || subjearliest[msg[:subj]] > msg[:date]
        subjearliest[msg[:subj]] = msg[:date]
      end
    }
  }

  subjsets.each { |subj, _|
    parent = subjtop[subj]
    next  unless parent

    subjsets[subj].each { |msg|
      if msg[:re_in_subj]
        tree[parent[mid]][msg[:mid]] = msg
        toplevel.delete msg[:mid]
      end
    }
  }

  sorted = []
  rec = lambda { |level, mid, msg|
    m = Msg::Cache[msg[:id]]
    m.depth = level
    sorted << m
    tree[mid].keys.sort_by { |a| mid2msg[a][:date] }.each { |kid|
      rec[level+1, kid, tree[mid][kid]]
    }
  }

  tops = toplevel.keys.sort_by { |mid|
    [ subjearliest[mid].to_s, toplevel[mid][:date] ]
  }
  tops.reverse!  if reverse
  tops.each { |top|
    rec[0, top, toplevel[top]]
  }

  sorted
end

$now = Time.now
def nicedate(t)
  if $now.year == t.year && $now.month == t.month
    if $now.day == t.day
      t.strftime("   %H:%M  ")
    else
      t.strftime("%a %b %d")
    end
  else
    t.strftime("%Y-%m-%d")
  end
end

def safefirst(str, size)
  str.unpack("U*")[0, size].pack("U*")
rescue ArgumentError  # invalid UTF-8
  str[0, size]
end

def nicefrom(t, size)
  size = [0, size].max
  t ||= "(empty)"
  if t =~ /(.*) <.*>/
    t = $1.delete('"')
  end
  t = t.strip.squeeze(" ")
  safefirst(t + " "*size, size)
end

def strip_re(s)
  s.strip.gsub(/^(re(\[\d+\])?[:;]\s*)+/i) {
    yield  if block_given?
    ""
  }
end

def nicesubj(s, size, depth)
  s = strip_re(s)  if depth > 0
  safefirst("  "*depth + s, size).ljust(size)
end

TOKEN = "[-#!$%&'*+.^_{}|\\w]+"
def select(ctx, opts)
  seq = load_seq(default_seq)

  mid = seq[ctx["#{default_seq}-cur"]-1].mid  rescue nil

  id2idx = {}
  seq.each { |msg| id2idx[msg.id] = msg.idx }

  query = opts["args"].join(" ")

  aliases = parse_config
  old = ""
  while query != old
    old, query = query, query.gsub(/%[\w-]+/) { aliases[$&] || $& }
  end

  scanner = StringScanner.new(query)
  seq = expr(scanner, ctx, seq.dup, opts)
  scanner.eos?  or raise "trailing junk"

  seq.each { |msg| msg.idx = id2idx[msg.id] }  # restore idx

  seq.each { |msg|
    return [seq, msg.idx]  if msg.mid == mid
  }

  [seq, 1]
end

def expr(scanner, ctx, initial, opts)
  seq = initial.dup
  selected = :all
  using_initial = true
  reverse = !!opts['reverse']

  until scanner.eos?
    if scanner.scan(/\s+/)
      # skip whitespace
    elsif scanner.scan(/\(/)
      seq &= expr(scanner, ctx, seq, opts)
    elsif scanner.scan(/\)/)
      break

    elsif scanner.scan(/\.?\/\S+/)
      selected = []  if selected == :all
      seq << Msg::Cache.from_file(scanner.matched)
      selected << seq.size-1

    elsif scanner.scan(/thread/)
      seq = thread(seq, reverse)
    elsif scanner.scan(/reverse/)
      reverse = !reverse

    elsif scanner.scan(/(next|prev|cur|\.|first|last|all|thr|sub(?!j)|[+-]?\d+)(:([+-]?(\d+)|thr|sub)|-(next|prev|cur|\.|first|last|all|(\d+)))?/)

      selected = []  if selected == :all
      [*ref2idx(ctx, scanner.matched)].each { |idx|
        selected << idx-1
      }

    elsif scanner.scan(/(#{TOKEN})([:~<>=])(?:('([^']*)'|#{TOKEN}))/)
      seq = seq.find_all { |msg|
        pattern = scanner[4] || scanner[3]
        field = case scanner[1]
                when "subj", "subject"; msg.subj
                when "date"; pattern = Time.parse(pattern).to_f; msg.date
                when "from"; msg.from
                when "body"; metamail(msg.file)
                else
                  raise "unknown field #{scanner[1].dump}, add code to load mail"
                end
        case scanner[2]
        when ":"
          pattern.split.any? { |keyword| field =~ /#{keyword}/i }
        when "~"
          field =~ /#{pattern}/
        when "<"
          field < pattern
        when ">"
          field > pattern
        else
          raise "invalid selector #{scanner.matched}"
        end
      }

    elsif scanner.scan(/\+(\S*)/)
      seq = []  if using_initial

      folder = scanner.matched
      ctx['folder'] = folder  unless folder == "+"

      if opts["cached"]
        seq = Msg::Cache.from_folder(folder)
      else
        fpath = folder2path(folder)

        if opts["inc"] || opts["save"] == "."   # on inc, read
          begin
            Dir.foreach(File.join(fpath, "/../new/")) { |file|
              next  if file =~ /\A\./
              File.rename "#{fpath}/../new/#{file}", "#{fpath}/#{file}:2,"
            }
          rescue Errno::ENOENT
            abort "coma: no such folder #{fpath}"
          end
        end

        Dir.foreach(fpath) { |file|
          next  if file =~ /\A\./
          next  unless File.file? File.join(fpath, file)
          seq << Msg::Cache.from_file(File.join(fpath, file), folder)
        }
      end
      using_initial = false
      seq = thread(seq, reverse)

    elsif scanner.scan(/-/)
      seq = []  if using_initial
      warn "coma: Go ahead and enter mail filenames..."  if STDIN.tty?
      while line = STDIN.gets
        seq << Msg::Cache.from_file(line.chomp)
      end
      using_initial = false
      seq

    elsif scanner.scan(/%(\S*)/)
      seq = []  if using_initial

      seq.concat load_seq(scanner[1])

      using_initial = false
      seq = thread(seq, reverse)

    elsif scanner.scan(/\|/)
      seq |= expr(scanner, ctx, initial, opts)
    elsif scanner.scan(/\&/)
      seq &= expr(scanner, ctx, initial, opts)
    elsif scanner.scan(/\\/)
      seq -= expr(scanner, ctx, initial, opts)

    elsif scanner.scan(/flagged/)
      seq = seq.find_all { |msg| msg.flags =~ /F/ }
    elsif scanner.scan(/unflagged/)
      seq = seq.find_all { |msg| msg.flags !~ /F/ }
    elsif scanner.scan(/seen/)
      seq = seq.find_all { |msg| msg.flags =~ /S/ }
    elsif scanner.scan(/unseen/)
      seq = seq.find_all { |msg| msg.flags !~ /S/ }
    elsif scanner.scan(/replied/)
      seq = seq.find_all { |msg| msg.flags =~ /R/ }
    elsif scanner.scan(/unreplied/)
      seq = seq.find_all { |msg| msg.flags !~ /R/ }

    elsif scanner.scan(/subject/)
      seq = seq.sort_by { |msg|
        msg.depth = 0  # reset depth
        [opts['limit'] ? msg.date.to_i/(24*60*60*opts['limit'].to_i) : 0,
         strip_re(msg.subj),
         msg.date]
      }
      seq.reverse!  if reverse
    elsif scanner.scan(/date/)
      seq = seq.sort_by { |msg|
        msg.depth = 0  # reset depth
        msg.date
      }
      seq.reverse!  if reverse
    elsif scanner.scan(/from/)
      seq = seq.sort_by { |msg|
        msg.depth = 0  # reset depth
        [opts['limit'] ? msg.date.to_i/(24*60*60*opts['limit'].to_i) : 0,
         msg.from,
         msg.date]
      }
      seq.reverse!  if reverse
    else
      raise "can't parse #{scanner.rest.dump}"
    end
  end
  
  seq = seq[-Integer(opts['last'] || 20)..-1]  if opts['last']

  if selected == :all
    seq
  else
    seq.values_at(*selected).compact
  end
end

def cmd_read(argv)
  cmd_scan(argv << "-inc", "read")
end

# This is roughly scan.YYYYMMDD
def fmt_default(msg, cur, opts)
  width = opts['width'] ? opts['width'].to_i : term_width
  # timely-like single-line format
  if msg.idx
    idx = msg.idx
    flag = (msg.idx == cur ? "+" : nil)
  else
    idx = ''
    flag = nil
  end
  flag ||= (msg.flags !~ /S/ ? "." : " ")
  puts "%4s%1s%1s%10s  %s  %s\n" % [idx,
                                    flag,
                                    (msg.flags =~ /R/ ? "-" : " "),
                                    nicedate(Time.at(msg.date)),
                                    nicefrom(msg.from, 17),
                                    nicesubj(msg.subj, width-37, msg.depth)]
end

# the original nmh format
def fmt_nmh(msg, cur, opts)
  width = opts['width'] ? opts['width'].to_i : term_width
  # timely-like single-line format
  if msg.idx
    idx = msg.idx
    flag = (msg.idx == cur ? "+" : nil)
  else
    idx = ''
    flag = nil
  end
  flag ||= (msg.flags !~ /S/ ? "." : " ")
  puts "%4s%1s%1s%4s  %s  %s\n" % [idx,
                                    flag,
                                    (msg.flags =~ /R/ ? "-" : " "),
                                    Time.at(msg.date).strftime("%m/%d"),
                                    nicefrom(msg.from, 17),
                                    nmhsubj(msg, width-32)]
end

def nmhsubj(msg, width)
  begin
    text = metamail(msg.file).sub(/.*?\n\n\S*/m, "").gsub(/\s+/, " ").lstrip
  rescue
    p $!
    text = ""
  end

  (msg.subj + "<<" + text + ">>").unpack("U*")[0, width].pack("U*").ljust(width)\
    rescue msg.subj[0, width].ljust(width)   # in case of invalid UTF-8
end

def fmt_twoline(msg, cur, opts)
  width = opts['width'] ? opts['width'].to_i : term_width
  puts "%4d%s%s\n%4s %s  %s" % [msg.idx, (msg.idx == cur ? "*" : " "),
                                    nicesubj(msg.subj, width-37, msg.depth),
                                    msg.flags,
                                    Time.at(msg.date).strftime("%Y-%m-%d %H:%M"),
                                    msg.from]
end

# inspired by 9fans.net/archive
def fmt_9fans(msg, cur, opts)
  width = opts['width'] ? opts['width'].to_i : term_width
  if msg.depth == 0
    puts
    puts nicesubj(msg.subj, width, msg.depth)
  end
  puts "  %4d%s   %s %s" % [msg.idx, (msg.idx == cur ? "*" : " "),
                            nicefrom(msg.from, width-42),
                            Time.at(msg.date).rfc2822]
end

# inspired by mailx
def fmt_mailx(msg, cur, opts)
  width = opts['width'] ? opts['width'].to_i : term_width
  puts "%s%s%s%4d %s   %s %s" % [msg.idx == cur ? ">" : " ",
                                msg.flags =~ /S/ ? " " : "N",
                                msg.flags =~ /R/ ? "R" : " ",
                                msg.idx,
                                nicefrom(msg.from, 17),
                                Time.at(msg.date).strftime("%a %b %02d %H:%M"),
                                nicesubj(msg.subj, width-45, msg.depth)
                               ]
end

def cmd_scan(argv, cmd="scan")
  opts = parse(argv, cmd, %w[reverse last: limit: cached inc
                             save: add: delete: q fmt: width:])

  with_context { |ctx|
    seq, cur = select(ctx, opts)

    if cmd == "read"
      seq.each_with_index { |msg, i| msg.idx = i+1 }
      save_seq(default_seq, seq)
      ctx["#{default_seq}-cur"] = cur
    end

    if opts["save"]
      save_seq(opts["save"].first, seq)
    end
    if opts["add"]
      save_seq(opts["add"].first, load_seq(opts["add"].first) | seq)
    end
    if opts["delete"]
      save_seq(opts["delete"].first, load_seq(opts["delete"].first) - seq)
    end

    unless opts["q"]
      seq.each { |msg|
        send("fmt_#{opts["fmt"] ? opts["fmt"].first : "default"}",
             msg, cur, opts)
      }
    end
  }
end

def ref2idx(ctx, ref)
  seq = load_seq(default_seq)

  case ref
  when "next"
    ref = "+1"
  when "prev"
    ref = "-1"
  when "cur", "."
    ref = "+0"
  end

  case ref
  when /(.*):([+-]?)(\d+)\z/
    idx = ref2idx(ctx, $1)
    case $2
    when "";  idx..idx+Integer($3) #XXX not MH-style, depends on first/last
    when "+"; idx..idx+Integer($3)
    when "-"; idx-Integer($3)..idx
    end
  when /.-./
    a, b = ref.split("-", 2)
    ref2idx(ctx, a)..ref2idx(ctx, b)
  when /\A[+-]\d+\z/
    case ctx["#{default_seq}-cur"] + Integer(ref)
    when 1..seq.size
      ctx["#{default_seq}-cur"] + Integer(ref)
    else
      raise ArgumentError, "invalid reference"
    end
  when /\A\d+\z/
    idx = Integer(ref)
    if idx > seq.size
      raise ArgumentError, "no message #{idx}"
    else
      idx
    end
  when "first"
    1
  when "last"
    seq.size
  when "all"
    1..seq.size
  when "thr"
    ref2idx(ctx, "cur:thr")
  when /(.*):thr\z/
    start = ref2idx(ctx, $1)
    while start > 1 && seq[start-1].depth > 0
      start -= 1
    end
    stop = start+1
    while stop <= seq.size && seq[stop-1].depth != 0
      stop += 1
    end
    start..stop-1
  when "sub"
    ref2idx(ctx, "cur:sub")
  when /(.*):sub\z/
    start = ref2idx(ctx, $1)
    depth = seq[start-1].depth
    stop = start + 1
    while stop <= seq.size && seq[stop-1].depth > depth
      stop += 1
    end
    start..stop-1
  else
    raise ArgumentError, "invalid reference"
  end
end

def metamail(file)
  text = File.read(file)
  # Unix to Internet line conversion.
  text.gsub!("\n", "\r\n")  unless text =~ /\r\n[\t ]*\r\n/m
  MiniMime.new(text).render.gsub("\r\n", "\n")
end

def cmd_show(argv)
  opts = parse(argv, "show", %w[nopager keep path raw idx select wide])
  opts['args'] = ["."]  if opts['args'].empty?

  if $stdout.tty? && !opts['nopager']
    $stdout = IO.popen("less -FRWXe", "w")
    at_exit { $stdout.close }
  end

  seen = []

  with_context { |ctx|
    seq, cur = select(ctx, opts)

    min_depth = seq.map { |msg| msg.depth }.min

    seq.each_with_index { |msg, i|
      ctx["#{default_seq}-cur"] = msg.idx  if msg.idx && !opts["keep"]
      if opts['path']
        puts msg.file
      elsif opts['raw']
        puts File.read(msg.file)
      elsif opts['idx']
        puts msg.idx
      elsif opts['select']
        # do nothing
      elsif opts['wide']
        puts if i > 0
        text = metamail(msg.file)
        text.gsub!(/^/, "  " * (msg.depth-min_depth) + "| ").sub(/\|/, "*")
        puts text
        seen << (msg.idx).to_s  if msg.idx
      else
        puts "\C-l\n" + "#"*term_width  if i > 0
        puts metamail(msg.file)
        seen << (msg.idx).to_s  if msg.idx
      end
    }
  }

  cmd_mark(seen << "-seen")  unless opts['keep'] || seen.empty?
end

def cmd_next(argv)
  cmd_show(["next"])
rescue ArgumentError
  abort "no more mail"
end

def cmd_prev(argv)
  cmd_show(["prev"])
end

def cmd_att(argv)
  opts = parse(argv, "att", %w[f])

  seq = load_seq(default_seq)

  with_context { |ctx|
    msg = seq[ctx["#{default_seq}-cur"] - 1]
    text = File.read(msg.file)
    # Unix to Internet line conversion.
    text.gsub!("\n", "\r\n")  unless text =~ /\r\n[\t ]*\r\n/m

    if opts['args'].empty?
      puts MiniMime.new(text).render_tree
    else
      n, filename, _ = opts['args']
      n = Integer(n)
      name, body = MiniMime.new(text).extract(n)

      name ||= "attachment-#{n}"

      sanitized = name.tr(" ", "-").delete("^a-zA-Z0-9_.-").sub(/\A\.+/, '')
      outfile = filename || sanitized

      if outfile == "-"
        puts body
      else
        if File.exist?(outfile) && !opts['f']
          abort "#{outfile.dump} already exists, use -f to override."
        else
          File.open(outfile, "w") { |out| out << body }
          puts outfile
        end
      end
    end
  }
end

def cmd_inc(argv)
  cmd_folders(["-inc"])
end  

def cmd_folders(argv)
  opts = parse(argv, "folders", %w[list u s inc])

  num = Hash.new(0)
  unread = Hash.new(0)
  new = Hash.new(0)

  if opts['list']
    puts Dir[File.expand_path($MAILDIR_PREFIX) + "/**/cur"].map { |folder|
      f = folder.gsub(/\A#{Regexp.quote(File.expand_path($MAILDIR_PREFIX))}\/?/, '+').
      gsub(/\/cur\z/, '')
    }
    return
  end

  Dir[File.expand_path($MAILDIR_PREFIX) + "/**/cur/*"].each { |file|
    num[File.dirname(file)] += 1
    unread[File.dirname(file)] += 1  unless file =~ /:2,.*S/
  }
  Dir[File.expand_path($MAILDIR_PREFIX) + "/**/new/*"].each { |file|
    new[File.dirname(file).gsub(%r{/new\z}, '/cur')] += 1
  }
  num.keys.sort.each { |folder|
    next  if opts["u"] && unread[folder] + new[folder] == 0
    next  if opts["inc"] && new[folder] == 0

    f = folder.gsub(/\A#{Regexp.quote(File.expand_path($MAILDIR_PREFIX))}\/?/, '+').
    gsub(/\/cur\z/, '')
    if opts["s"]
      puts "%-15s %5d/%3d/%3d" % [f[0,14], num[folder], unread[folder], new[folder]]
    else
      puts "%-20s %5d messages %5d unread %5d new" % [f, num[folder], unread[folder], new[folder]]
    end
  }
end

def cmd_seqs(argv)
  opts = parse(argv, "seqs", %w[list clear...])

  if opts["clear"]
    opts["clear"].each { |name|
      begin
        File.delete(File.expand_path("~/.config/coma/seq-#{name}"))
      rescue Errno::ENOENT
        warn "coma: no such sequence '#{name}'"
      end
    }
    exit
  end
  
  Dir.entries(File.expand_path("~/.config/coma")).sort.each { |f|
    next  unless f =~ /^seq-/
    name = $'

    if opts["list"]
      puts name
    else
      puts "%%%-14s %5d messages" % [name, load_seq(name).size]
    end
  }
end

# http://www.jwz.org/doc/mid.html
def generate_mid(from=nil)
  require 'socket'

  timestamp = (Time.now.to_f * 1000).to_i
  random = rand(2**32)
  fqdn = Socket.gethostbyname(Socket.gethostname).first
  if fqdn =~ /localhost/ && from =~ /@(\w*\.\w*)/
    # Better use the hostname in From:.
    fqdn = $1
  end
  "<#{timestamp.to_s(36).upcase}.#{random.to_s(36).upcase}@#{fqdn}>"
end

HEADER_SEP = "--text follows this line--"
def cmd_mail(argv, cmd="mail")
  opts = parse(argv, cmd, %w[to... cc... bcc... repl... fwd... att...
                             subject: from: noreplyto noreplyall noquote keep debug])
  p opts
  exit
  to = opts['to'].join(", ")

  seq = load_seq(default_seq)

  with_context { |ctx|
    if opts['repl']
      ref = opts['repl'].first || "."
      msg = seq[ref2idx(ctx, ref) - 1]

      re = MiniMime.new(File.read(file).gsub("\n", "\r\n"))
      if re['reply-to'] && !opts['noreplyto']
        to = re['reply-to'].to_s
      else
        to = msg.from
      end
      opts['cc'] ||= [re['cc']]  unless opts['noreplyall'] || !re['cc']
      opts['subject'] = ["Re: " + strip_re(msg.subj)]
      irt = msg.mid

      unless opts['noquote']
        quote = metamail(file).split("\n\n", 2).last
      end

    elsif opts['fwd']
      ref = opts['fwd'].first || "."
      msg = seq[ref2idx(ctx, ref)-1]
      opts['subject'] = ["Fwd: " + strip_re(msg.subj)]
      from = msg.from
      original_mail = File.read(file)
    end

    Tempfile.open("coma-mail") { |tmp|
      tmp.puts("To: #{to}")
      tmp.puts("Cc: #{opts['cc'].join(", ")}")    if opts['cc']
      tmp.puts("Bcc: #{opts['bcc'].join(", ")}")  if opts['bcc']
      tmp.puts("Subject: #{opts['subject'].to_a.join(" ")}")
      tmp.puts("In-Reply-To: #{irt}")  if irt
      tmp.puts("From: #{opts['from'] || ctx['from']}")  if opts['from'] || ctx['from']
      tmp.puts(HEADER_SEP)
      tmp.puts
      begin
        if quote
          tmp.puts "#{msg.from} writes:"
          tmp.puts
          tmp.puts quote.gsub(/^/, "> ")
        end

        if original_mail
          tmp.puts "#begin message/rfc822"
          tmp.puts original_mail
          tmp.puts "#end"
        end

        opts['att'].to_a.each { |att|
          tmp.puts "##{`file --mime-type -bL '#{att}'`.strip} #{att}"
        }

        tmp.puts "--\n" + File.read(File.expand_path("~/.signature"))
      rescue
        # nevermind
      end
      tmp.close

      original = File.read(tmp.path)
      system(ENV["VISUAL"] || ENV["EDITOR"] || "vi", tmp.path)
      mail = File.read(tmp.path)

      if mail.empty? || mail == original || !mail.index(HEADER_SEP)
        abort "mail canceled"
      end

      parsed = MiniMime.new(mail.sub(HEADER_SEP, "").gsub("\n", "\r\n"))
      from = parsed["from"]

      headers, body = mail.split(HEADER_SEP, 2)

      headers << "Message-Id: #{generate_mid(from)}\n"
      headers << "X-Mailer: coma/#{COMA_VERSION}\n"

      headers, body = makemime(headers, body)

      if opts['debug']
        puts headers
        puts
        puts body
      else
        IO.popen("sendmail -t", "w") { |out|
          out.write headers
          out.write "\n"
          out.write body
        }
        abort "sendmail failed"  unless $?.success?
      end
    }
  }

  if opts['repl'] && !opts['keep']
    cmd_mark(opts['repl'].first || ".", "-replied")
  end
end

def generate_boundary
  timestamp = (Time.now.to_f * 1000).to_i
  random = rand(2**32)

  "----#{timestamp.to_s(36)}-#{rand(2**32).to_s(36)}".upcase
end

def makemime(header, body)
  boundary = generate_boundary

  # Sanitize and encode headers.
  header = header.split(/(\s+)/).map { |chunk|
    if chunk =~ /[^\012\015\040-\176]/
      "=?utf-8?Q?#{[chunk].pack("M*").gsub(/=\n\Z/, "")}?="
    else
      chunk
    end
  }.join
  
  mimebody = ""
  if body =~ %r{(^##{TOKEN}/#{TOKEN}\s*.+|^#begin )}   # any MIME parts at all?
    header << "Mime-Version: 1.0\n"
    header << %Q{Content-Type: multipart/mixed; boundary="#{boundary}"\n}
    
    mimebody << body.split(%r{(^##{TOKEN}/#{TOKEN}\s*.+?\n|^#begin #{TOKEN}/#{TOKEN}.*?\n.*^#end\n)}m).map { |part|
      next  if part == "" || part == "\n"

      if part =~ %r{\A#(#{TOKEN}/#{TOKEN})\s*(.+)}
        content_type = $1
        content = open($2) { |input| input.read }
        disp = %{attachment; filename="#{File.basename($2).delete('"')}"}
      elsif part =~ %r{\A#begin (#{TOKEN}/#{TOKEN}).*?\n(.*\n)#end\n}m
        content_type = $1
        content = $2
        disp = "inline"
      else                      # ordinary text
        content_type = "text/plain; charset=utf-8"
        content = part
        disp = "inline"
      end
        
      binary = content.count("^ -~", "^\r\n") / content.size > 0.3 ||
        content.count("\x00") > 0
        
      if binary
        part = [content].pack("m*")
        cte = "base64"
      elsif content =~ /[\200-\377]/ || content =~ /.{70}/
        part = [content].pack("M*")
        cte = "quoted-printable"
      else
        cte = "8bit"
      end
      
      "--#{boundary}\nContent-Type: #{content_type}\nContent-Transfer-Encoding: #{cte}\nContent-Disposition: #{disp}\n\n#{content}\n"
    }.join + "\n--#{boundary}--\n"
  else
    if body =~ /[\200-\377]/ || body =~ /.{70}/
      body = [body].pack("M*")
      header << "Mime-Version: 1.0\n"
      header << "Content-Type: text/plain; charset=utf-8\n"
      header << "Content-Transfer-Encoding: quoted-printable\n"
      header << "Content-Disposition: inline\n"
    else
      header << "Content-Type: text/plain; charset=us-ascii\n"
    end
    
    mimebody = body
  end

  [header, mimebody]
end

def cmd_repl(argv)
  cmd_mail(["-repl", *argv], "repl")
end

def cmd_fwd(argv)
  cmd_mail(["-fwd", *argv], "fwd")
end

def cmd_mark(argv)
  opts = parse(argv, "mark", %w[flagged unflagged seen unseen replied unreplied])

  if opts["args"].empty?
    warn 'Use "coma mark all" if you want to mark the whole sequence.'
    abort 'coma: no messages selected.'
  end

  with_context { |ctx|
    seq, cur = select(ctx, opts)
    seq.each_with_index { |msg, i|
      file = msg.file.dup
      flags = msg.flags.split(//)

      flags |= ["F"]  if opts['flagged']
      flags -= ["F"]  if opts['unflagged']
      flags |= ["S"]  if opts['seen']
      flags -= ["S"]  if opts['unseen']
      flags |= ["R"]  if opts['replied']
      flags -= ["R"]  if opts['unreplied']

      msg.flags = flags.sort.join

      next  if file == msg.file

      File.rename file, msg.file
      Msg::Cache.save msg  # update db
    }
  }
end

def cmd_usage(argv)
  puts "Subcommands: " + Object.private_instance_methods.grep(/cmd_/).
    map { |cmd| cmd.sub(/^cmd_/, '') }.sort.join(" ")
end

command = ARGV.first || 'usage'
if Object.private_instance_methods.include?("cmd_#{command}")
  send "cmd_#{command}", ARGV[1..-1]
else
  addargs = parse_config[command].to_s.split
  exec "coma-#{command}", *(addargs + ARGV[1..-1])
end
