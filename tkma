#!/usr/bin/env ruby
# -*- ruby -*-

require 'tk'

# http://svn.python.org/projects/external/tk-8.5.2.0/library/obsolete.tcl
# Tk.tk_call "::tk::classic::restore"

root = TkRoot.new {
  title "tkma"
}

panes = TkPanedWindow.new(root) {
  orient "vertical"
}

folders = TkText.new(panes) {
  padx 0
  pady 0
  background panes.background
  relief "flat"
  pack :expand => true, :fill => :both
  height 3
}

$rescan_opts = "-thread"
$scan = TkVariable.new
def rescan(inc=false)
  `coma inc #{$folder}`  if inc
  $scan.value = `coma read #{$folder} -width #{textwidth} #{$rescan_opts}`.split("\n")
end

def textwidth
  # XXX good enough for now
  ($mailcontent.winfo_width - $mailcontent.borderwidth) /
    TkFont.measure("TkFixedFont", "0") - 1
end

`coma folders -list`.split("\n").sort.each { |folder|
  TkTextWindow.new(folders, "end") {
    self.window = TkButton.new {
      text folder
      padx 3
      pady 1
      command {
        $folder = folder
        rescan true
      }
      pack "side" => "left"
    }
  }
}
folders.state = 'disabled'

class TkText
  def textheight
    number(tk_send_without_enc('count', '-ypixels', '1.0', 'end'))
  end
end

toc = TkFrame.new(panes) {
  pack :expand => true, :fill => "x"
}

tocbuttons = TkFrame.new(toc) {
  pack :expand => false, :fill => :both
}
%w{all date from subject thread flagged unflagged replied unreplied seen unseen}.each { |btn|
  TkButton.new(tocbuttons) {
    text btn
    padx 3
    pady 1
    command {
      $rescan_opts = "-" + btn
      rescan
    }
    pack "side" => "right"
  }
}

def sel
  $mails.get($mails.curselection)[/\d+/]
end

$redisplay_opts = []
def redisplay
  $mailcontent.state = 'normal'
  $mailcontent.value = `coma show #{sel} #{$redisplay_opts.join(" ")}`
  $mailcontent.state = 'disabled'
  rescan
end

$mails = TkScrollbox.new(toc) {
  insert 0, "foo"
  insert 0, "bar"
  font "TkFixedFont"
  listvariable $scan
  pack :expand => true, :fill => "both"

  bind("<ListboxSelect>") {
    redisplay
  }
}

mail = TkFrame.new(panes) {
  pack :expand => true, :fill => "both"
}

mailbuttons = TkFrame.new(mail) {
  pack :expand => false, :fill => "both", :anchor => "ne"
}

TkButton.new(mailbuttons) {
    padx 3
    pady 1
  text "repl"
  command { 
    system "urxvt", "-e", "coma", "repl", sel
  }
  pack "side" => "right"
}
TkButton.new(mailbuttons) {
    padx 3
    pady 1
  text "fwd"
  command { 
    system "urxvt", "-e", "coma", "fwd", sel
  }
  pack "side" => "right"
}
TkButton.new(mailbuttons) {
    padx 3
    pady 1
  text "raw"
  command {
    unless $redisplay_opts.delete "-raw"
      $redisplay_opts << "-raw"
    end
    redisplay
  }
  pack "side" => "right"
}

$mailcontent = TkText.new(mail) {
  yscrollbar(TkScrollbar.new(mail).pack(:fill=>:y, :side=>:right))
  state 'disabled'
  insert "0.0", "foobar"

  pack :expand => true, :fill => "both", :anchor => "s"
}

panes.add folders
panes.add toc
panes.add mail
panes.pack(:expand => true, :fill => "both")

Tk.update
panes.paneconfigure(folders, :minsize => folders.textheight + 5)

panes.paneconfigure(toc, :minsize => 20)
panes.paneconfigure(mail, :minsize => 20)

prevth = folders.textheight
root.bind("Configure") {
  break  if folders.textheight == prevth
  panes.paneconfigure(folders, :minsize => folders.textheight + 5)
  panes.sash_place(0, 0, 0)
}

Tk.mainloop
